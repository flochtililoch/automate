// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var Path, ScopedFS, fs, mkdirp, rimraf, temp,
    __hasProp = {}.hasOwnProperty;

  temp = require('temp');

  fs = require('fs');

  Path = require('path');

  mkdirp = require('mkdirp');

  rimraf = require('rimraf');

  ScopedFS = (function() {

    function ScopedFS(path) {
      var k, v;
      this.path = path;
      for (k in this) {
        if (!__hasProp.call(this, k)) continue;
        v = this[k];
        if (typeof v === 'function') this[k] = v.bind(this);
      }
    }

    ScopedFS.prototype.rename = function(oldpath, newpath, callback) {
      return fs.rename(this.pathOf(oldpath), this.pathOf(newpath), callback);
    };

    ScopedFS.prototype.renameSync = function(oldpath, newpath) {
      return fs.renameSync(this.pathOf(oldpath), this.pathOf(newpath));
    };

    ScopedFS.prototype.stat = function(path, callback) {
      return fs.stat(this.pathOf(path), callback);
    };

    ScopedFS.prototype.statSync = function(path) {
      return fs.statSync(this.pathOf(path));
    };

    ScopedFS.prototype.chown = function(path, uid, gid, callback) {
      return fs.chown(this.pathOf(path), uid, gid, callback);
    };

    ScopedFS.prototype.chownSync = function(path, uid, gid) {
      return fs.chownSync(this.pathOf(path), uid, gid);
    };

    ScopedFS.prototype.lchown = function(path, uid, gid, callback) {
      return fs.lchown(this.pathOf(path), uid, gid, callback);
    };

    ScopedFS.prototype.lchownSync = function(path, uid, gid) {
      return fs.lchownSync(this.pathOf(path), uid, gid);
    };

    ScopedFS.prototype.chmod = function(path, mode, callback) {
      return fs.chmod(this.pathOf(path), mode, callback);
    };

    ScopedFS.prototype.chmodSync = function(path, mode) {
      return fs.chmodSync(this.pathOf(path), mode);
    };

    ScopedFS.prototype.lchmod = function(path, mode, callback) {
      return fs.lchmod(this.pathOf(path), mode, callback);
    };

    ScopedFS.prototype.lchmodSync = function(path, mode) {
      return fs.lchmodSync(this.pathOf(path), mode);
    };

    ScopedFS.prototype.lstat = function(path, callback) {
      return fs.lstat(this.pathOf(path), callback);
    };

    ScopedFS.prototype.lstatSync = function(path) {
      return fs.lstatSync(this.pathOf(path));
    };

    ScopedFS.prototype.link = function(srcpath, dstpath, callback) {
      return fs.link(this.pathOf(srcpath), this.pathOf(dstpath), callback);
    };

    ScopedFS.prototype.linkSync = function(srcpath, dstpath) {
      return fs.linkSync(this.pathOf(srcpath), this.pathOf(dstpath));
    };

    ScopedFS.prototype.symlink = function(srcpath, dstpath, type, callback) {
      return fssym.symlink(this.pathOf(srcpath), this.pathOf(dstpath), type, callback);
    };

    ScopedFS.prototype.symlinkSync = function(srcpath, dstpath, type) {
      return fssym.symlinkSync(this.pathOf(srcpath), this.pathOf(dstpath), type);
    };

    ScopedFS.prototype.readlink = function(path, callback) {
      return fs.readlink(this.pathOf(path), callback);
    };

    ScopedFS.prototype.readlinkSync = function(path) {
      return fs.readlinkSync(this.pathOf(path));
    };

    ScopedFS.prototype.realpath = function(path, cache, callback) {
      return fs.readlink(this.pathOf(path), cache, callback);
    };

    ScopedFS.prototype.realpathSync = function(path, cache) {
      return fs.readlinkSync(this.pathOf(path), cache);
    };

    ScopedFS.prototype.unlink = function(path, callback) {
      return fs.unlink(this.pathOf(path), callback);
    };

    ScopedFS.prototype.unlinkSync = function(path) {
      return fs.unlinkSync(this.pathOf(path));
    };

    ScopedFS.prototype.rmdir = function(path, callback) {
      return fs.rmdir(this.pathOf(path), callback);
    };

    ScopedFS.prototype.rmdirSync = function(path) {
      return fs.rmdirSync(this.pathOf(path));
    };

    ScopedFS.prototype.mkdir = function(path, mode, callback) {
      return fs.mkdir(this.pathOf(path), mode, callback);
    };

    ScopedFS.prototype.mkdirSync = function(path, mode) {
      return fs.mkdirSync(this.pathOf(path), mode);
    };

    ScopedFS.prototype.readdir = function(path, mode, callback) {
      return fs.readdir(this.pathOf(path), mode, callback);
    };

    ScopedFS.prototype.readdirSync = function(path, mode) {
      return fs.readdirSync(this.pathOf(path), mode);
    };

    ScopedFS.prototype.readFile = function(relpath, encoding, callback) {
      return fs.readFile(this.pathOf(relpath), encoding, callback);
    };

    ScopedFS.prototype.readFileSync = function(relpath, encoding) {
      return fs.readFileSync(this.pathOf(relpath), encoding);
    };

    ScopedFS.prototype.writeFile = function(relpath, data, encoding, callback) {
      return fs.writeFile(this.pathOf(relpath), data, encoding, callback);
    };

    ScopedFS.prototype.writeFileSync = function(relpath, data, encoding) {
      return fs.writeFileSync(this.pathOf(relpath), data, encoding);
    };

    ScopedFS.prototype.appendFile = function(relpath, data, encoding, callback) {
      return fs.appendFile(this.pathOf(relpath), data, encoding, callback);
    };

    ScopedFS.prototype.appendFileSync = function(relpath, data, encoding) {
      return fs.appendFileSync(this.pathOf(relpath), data, encoding);
    };

    ScopedFS.prototype.exists = function(path, callback) {
      return fs.exists(this.pathOf(path), callback);
    };

    ScopedFS.prototype.existsSync = function(path) {
      return fs.existsSync(this.pathOf(path));
    };

    ScopedFS.prototype.createReadStream = function(path, options) {
      return fs.createReadStream(this.pathOf(path), options);
    };

    ScopedFS.prototype.createWriteStream = function(path, options) {
      return fs.createWriteStream(this.pathOf(path), options);
    };

    ScopedFS.prototype.open = function(path, flags, mode, callback) {
      return fs.open(this.pathOf(path), flags, mode, callback);
    };

    ScopedFS.prototype.openSync = function(path, flags, mode) {
      return fs.openSync(this.pathOf(path), flags, mode);
    };

    ScopedFS.prototype.truncate = function(fd, len, callback) {
      return fs.truncate(fd, len, callback);
    };

    ScopedFS.prototype.truncateSync = function(fd, len) {
      return fs.truncateSync(fd, len);
    };

    ScopedFS.prototype.fchown = function(fd, uid, gid, callback) {
      return fs.fchown(fd, uid, gid, callback);
    };

    ScopedFS.prototype.fchownSync = function(fd, uid, gid) {
      return fs.fchownSync(fd, uid, gid);
    };

    ScopedFS.prototype.fchmod = function(fd, mode, callback) {
      return fs.fchmod(fd, mode, callback);
    };

    ScopedFS.prototype.fchmodSync = function(fd, mode) {
      return fs.fchmodSync(fd, mode);
    };

    ScopedFS.prototype.close = function(fs, callback) {
      return fs.close(fs, callback);
    };

    ScopedFS.prototype.closeSync = function(fs) {
      return fs.closeSync(fs);
    };

    ScopedFS.prototype.futimes = function(fd, atime, mtime, callback) {
      return fs.futimes(fd, atime, mtime, callback);
    };

    ScopedFS.prototype.futimesSync = function(fd, atime, mtime) {
      return fs.futimesSync(fd, atime, mtime);
    };

    ScopedFS.prototype.fsync = function(fs, callback) {
      return fs.fsync(fs, callback);
    };

    ScopedFS.prototype.fsyncSync = function(fs) {
      return fs.fsyncSync(fs);
    };

    ScopedFS.prototype.write = function(fd, buffer, offset, length, position, callback) {
      return fs.write(fd, buffer, offset, length, position, callback);
    };

    ScopedFS.prototype.writeSync = function(fd, buffer, offset, length, position) {
      return fs.writeSync(fd, buffer, offset, length, position);
    };

    ScopedFS.prototype.read = function(fd, buffer, offset, length, position, callback) {
      return fs.read(fd, buffer, offset, length, position, callback);
    };

    ScopedFS.prototype.readSync = function(fd, buffer, offset, length, position) {
      return fs.readSync(fd, buffer, offset, length, position);
    };

    ScopedFS.prototype.rmrf = function(path, callback) {
      return rimraf(this.pathOf(path), callback);
    };

    ScopedFS.prototype.rmrfSync = function(path) {
      return rimraf.sync(this.pathOf(path));
    };

    ScopedFS.prototype.mkdirp = function(path, mode, callback) {
      return mkdirp(this.pathOf(path), mode, callback);
    };

    ScopedFS.prototype.mkdirpSync = function(path, mode) {
      return mkdirp.sync(this.pathOf(path), mode);
    };

    ScopedFS.prototype.putSync = function(relpath, data, encoding) {
      this.mkdirpSync(Path.dirname(relpath));
      return this.writeFileSync(relpath, data, encoding);
    };

    ScopedFS.prototype.applySync = function(update) {
      var content, relpath, _results;
      _results = [];
      for (relpath in update) {
        if (!__hasProp.call(update, relpath)) continue;
        content = update[relpath];
        if (typeof content === 'function') {
          _results.push(content(this.pathOf(relpath)));
        } else if (content != null) {
          if (relpath.match(/\/$/)) {
            _results.push(this.mkdirpSync(relpath.replace(/\/$/, '')));
          } else {
            _results.push(this.putSync(relpath, content));
          }
        } else {
          _results.push(this.rmrfSync(relpath, content));
        }
      }
      return _results;
    };

    ScopedFS.prototype.pathOf = function(relpath) {
      return Path.join(this.path, relpath);
    };

    ScopedFS.prototype.scoped = function(relpath) {
      return new ScopedFS(this.pathOf(relpath));
    };

    ScopedFS.prototype.createTempFS = function(affixes) {
      return new ScopedFS(temp.mkdirSync(affixes));
    };

    return ScopedFS;

  })();

  module.exports = new ScopedFS('/');

  module.exports.ScopedFS = ScopedFS;

}).call(this);
